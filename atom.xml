<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SNAKEのBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bufsnake.github.io/"/>
  <updated>2019-05-30T04:22:31.086Z</updated>
  <id>https://bufsnake.github.io/</id>
  
  <author>
    <name>Snake</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows驱动开发(1)</title>
    <link href="https://bufsnake.github.io/2019/05/29/Windows%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-1/"/>
    <id>https://bufsnake.github.io/2019/05/29/Windows驱动开发-1/</id>
    <published>2019-05-29T10:52:07.000Z</published>
    <updated>2019-05-30T04:22:31.086Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习的内容是基于WDF框架的Windows驱动开发</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>NT -&gt; WDM -&gt; WDF<blockquote><p>每个框架都是由其上一个框架发展而来的，主要原因是因为其上一个框架不易理解难于开发</p></blockquote></li><li>WDF简介<blockquote><p>WDF全称Windows驱动框架(Windows Driver Frameworks)<br>WDF两种级别的驱动程序</p><blockquote><p>用户级(UMDF–(User-Mode Driver Framework))</p><blockquote><p>是以 .dll 结尾的文件</p></blockquote><p>内核级(KMDF–(Kernel-Mode Driver Framework))</p><blockquote><p>是以 .sys 结尾的文件<br>可与其硬件直接会话，通常会通过HAL(硬件抽象层)访问硬件<br>所有的事物由对象表示，如Driver、Device等</p><blockquote><p>每个对象都有属性、方法、事件(有面向对象编程基础的都应该知道)<br>各种事件处理由事件回调函数处理<br>必须包含 DriverEntry 函数，像C语言中的 main 函数</p></blockquote></blockquote></blockquote></blockquote><h2 id="附上基本的DriverEntry例子"><a href="#附上基本的DriverEntry例子" class="headerlink" title="附上基本的DriverEntry例子"></a>附上基本的DriverEntry例子</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ntddk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;wdf.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">NTSTATUS <span class="title">DriverEntry</span><span class="params">(IN PDRIVER_OBJECT driver, IN PUNICODE_STRING reg_path)</span> </span>&#123;</span><br><span class="line">WDF_DRIVER_CONFIG config;</span><br><span class="line">NTSTATUS status;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化驱动对象的配置结构，设置DeviceAdd函数入口(此处为NULL)</span></span><br><span class="line">WDF_DRIVER_CONFIG_INIT(&amp;config, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建驱动对象，没有驱动对象和驱动对象环境变量结构</span></span><br><span class="line">status = WdfDriverCreate(</span><br><span class="line">driver,</span><br><span class="line">reg_path,</span><br><span class="line">WDF_NO_OBJECT_ATTRIBUTES, <span class="comment">//驱动对象环境变量结构</span></span><br><span class="line">&amp;config,</span><br><span class="line">WDF_NO_HANDLE   <span class="comment">//驱动对象</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;学习的内容是基于WDF框架的Windows驱动开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="Windows驱动开发" scheme="https://bufsnake.github.io/categories/Windows%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Windows驱动开发" scheme="https://bufsnake.github.io/tags/Windows%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="配置环境" scheme="https://bufsnake.github.io/tags/%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    
      <category term="Windows wdf驱动开发" scheme="https://bufsnake.github.io/tags/Windows-wdf%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>近期目标</title>
    <link href="https://bufsnake.github.io/2019/05/27/%E8%BF%91%E6%9C%9F%E7%9B%AE%E6%A0%87/"/>
    <id>https://bufsnake.github.io/2019/05/27/近期目标/</id>
    <published>2019-05-27T05:18:32.000Z</published>
    <updated>2019-05-27T05:41:56.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入了解逆向的静态分析，动态分析，符号执行以及fuzzing"><a href="#深入了解逆向的静态分析，动态分析，符号执行以及fuzzing" class="headerlink" title="深入了解逆向的静态分析，动态分析，符号执行以及fuzzing"></a>深入了解逆向的静态分析，动态分析，符号执行以及fuzzing</h2><h2 id="深入了解符号执行的几大框架"><a href="#深入了解符号执行的几大框架" class="headerlink" title="深入了解符号执行的几大框架"></a>深入了解符号执行的几大框架</h2><h4 id="1-angr"><a href="#1-angr" class="headerlink" title="1. angr"></a>1. angr</h4><h4 id="2-miasm"><a href="#2-miasm" class="headerlink" title="2. miasm"></a>2. miasm</h4><h4 id="3-KLEE"><a href="#3-KLEE" class="headerlink" title="3. KLEE"></a>3. KLEE</h4><h4 id="4-intel-pin"><a href="#4-intel-pin" class="headerlink" title="4. intel pin"></a>4. intel pin</h4><h2 id="深入了解fuzzing的框架"><a href="#深入了解fuzzing的框架" class="headerlink" title="深入了解fuzzing的框架"></a>深入了解fuzzing的框架</h2><h4 id="1-afl-fuzz"><a href="#1-afl-fuzz" class="headerlink" title="1. afl-fuzz"></a>1. afl-fuzz</h4><h2 id="深入了解模拟器"><a href="#深入了解模拟器" class="headerlink" title="深入了解模拟器"></a>深入了解模拟器</h2><h4 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h4><h4 id="unicorn-engine"><a href="#unicorn-engine" class="headerlink" title="unicorn engine"></a>unicorn engine</h4><h2 id="深入了解插装工具"><a href="#深入了解插装工具" class="headerlink" title="深入了解插装工具"></a>深入了解插装工具</h2><h4 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h4><h4 id="intel-pin"><a href="#intel-pin" class="headerlink" title="intel pin"></a>intel pin</h4><h4 id="DynamoRIO"><a href="#DynamoRIO" class="headerlink" title="DynamoRIO"></a>DynamoRIO</h4><h2 id="了解常用的工具，逆向方法以及Python库"><a href="#了解常用的工具，逆向方法以及Python库" class="headerlink" title="了解常用的工具，逆向方法以及Python库"></a>了解常用的工具，逆向方法以及Python库</h2><h4 id="qira"><a href="#qira" class="headerlink" title="qira"></a>qira</h4><h4 id="污点分析"><a href="#污点分析" class="headerlink" title="污点分析"></a>污点分析</h4><h4 id="Z3"><a href="#Z3" class="headerlink" title="Z3"></a>Z3</h4><h2 id="待续…"><a href="#待续…" class="headerlink" title="待续…"></a>待续…</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深入了解逆向的静态分析，动态分析，符号执行以及fuzzing&quot;&gt;&lt;a href=&quot;#深入了解逆向的静态分析，动态分析，符号执行以及fuzzing&quot; class=&quot;headerlink&quot; title=&quot;深入了解逆向的静态分析，动态分析，符号执行以及fuzzing&quot;&gt;
      
    
    </summary>
    
      <category term="折腾" scheme="https://bufsnake.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="目标" scheme="https://bufsnake.github.io/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>我和unicorn-engine的神奇之旅</title>
    <link href="https://bufsnake.github.io/2019/05/15/%E6%88%91%E5%92%8Cunicorn-engine%E7%9A%84%E7%A5%9E%E5%A5%87%E4%B9%8B%E6%97%85/"/>
    <id>https://bufsnake.github.io/2019/05/15/我和unicorn-engine的神奇之旅/</id>
    <published>2019-05-15T10:12:29.000Z</published>
    <updated>2019-05-15T10:56:14.626Z</updated>
    
    <content type="html"><![CDATA[<h4 id="神奇之处："><a href="#神奇之处：" class="headerlink" title="神奇之处："></a>神奇之处：</h4><blockquote><p>模拟CPU去执行程序或程序中的某个片段，某个函数，并且支持多个架构(Arm, Arm64 (Armv8), M68K, Mips, Sparc, &amp; X86 (include X86_64))，也就是说，只需要用代码声明一下程序运行所需要的架构，所需要的栈空间，运行基址等，程序就可以模拟执行了</p></blockquote><blockquote><p>unicorn-engine 是不能调用syscall的，指令模拟的时候跳转的位置及相应的指令块没有被加载到模拟器中，那模拟时肯定是会有异常的</p></blockquote><blockquote><p>假设unicorn-engine是一个牢房，关押了来自不同地方的人(具有不同CPU架构的程序)，牢房对他们的信息了如指掌，提审哪一个犯人都可以，并且可以对他们执行任何酷刑(对程序执行内存读写和栈读写等操作)，但是对他们的同伴的信息却知之甚少(没加载到模拟器的指令块)。貌似这个比喻并不恰当，但是有助于我的个人理解。</p></blockquote><h4 id="安装方法："><a href="#安装方法：" class="headerlink" title="安装方法："></a>安装方法：</h4><p>Linux上的安装方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install unicorn</span><br></pre></td></tr></table></figure></p><p>其余平台可进入<a href="http://www.unicorn-engine.org/download/" target="_blank" rel="noopener">官网</a>下载源文件编译安装</p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><p>可以参考看雪翻译的<a href="https://bbs.pediy.com/thread-224330.htm" target="_blank" rel="noopener">Unicorn引擎教程</a></p><h4 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h4><blockquote><p>整理了几个比较好的资料，因为我学习的时候发现基本上都是在照着<a href="http://eternal.red/2018/unicorn-engine-tutorial/" target="_blank" rel="noopener">Eternal Stories</a>的这个写的，所以整理了几篇不错的文章：</p></blockquote><ol><li><a href="https://bbs.pediy.com/thread-224330.htm" target="_blank" rel="noopener">Unicorn引擎教程</a></li><li><a href="http://galaxylab.org/%E5%9F%BA%E4%BA%8E-unicorn-%E7%9A%84%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E6%A8%A1%E6%8B%9F%E6%89%A7%E8%A1%8C%E5%92%8C-fuzzer-%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">基于-unicorn-的单个函数模拟执行和-fuzzer-实现</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/reverse/unicorn/introduction/" target="_blank" rel="noopener">Unicorn Engine 简介</a></li></ol><blockquote><p>好的文章都要立马转成pdf存到盘里，谁知道哪天博主一生气，好文章就没了呢。</p></blockquote><blockquote><p>WC，又成功水了一篇</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;神奇之处：&quot;&gt;&lt;a href=&quot;#神奇之处：&quot; class=&quot;headerlink&quot; title=&quot;神奇之处：&quot;&gt;&lt;/a&gt;神奇之处：&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;模拟CPU去执行程序或程序中的某个片段，某个函数，并且支持多个架构(Arm, Arm64 
      
    
    </summary>
    
      <category term="Tools" scheme="https://bufsnake.github.io/categories/Tools/"/>
    
    
      <category term="unicorn-engine" scheme="https://bufsnake.github.io/tags/unicorn-engine/"/>
    
      <category term="reverse tool" scheme="https://bufsnake.github.io/tags/reverse-tool/"/>
    
  </entry>
  
  <entry>
    <title>Fuzz Test</title>
    <link href="https://bufsnake.github.io/2019/05/14/Fuzz-Test/"/>
    <id>https://bufsnake.github.io/2019/05/14/Fuzz-Test/</id>
    <published>2019-05-14T10:49:21.000Z</published>
    <updated>2019-05-14T11:15:17.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本知识："><a href="#基本知识：" class="headerlink" title="基本知识："></a>基本知识：</h2><blockquote><p>Fuzz Testing(模糊测试)是一种很有效的测试方法,主要原理为构造一系列“坏”数据传入应用程序,通过判断程序是否发生异常发现和检测潜在的bug.而在安全领域引入fuzz技术,无疑可以使安全研究员效率倍增,更有效的挖掘和防护漏洞</p></blockquote><h2 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h2><h3 id="AFL-FUZZ"><a href="#AFL-FUZZ" class="headerlink" title="AFL-FUZZ"></a>AFL-FUZZ</h3><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><blockquote><p>是目前最高级的Fuzzing测试工具之一,由lcamtu开发</p></blockquote><blockquote><p>当需要测试的程序有源码时,AFL通过对源码重新编译时插桩(插入分析代码)的方法来探测程序内部的执行路径.相对于其他fuzzer,AFL-Fuzz具有更低的性能消耗,更有效的fuzzing策略和tricks最小化技巧,只需简单的配置即可处理复杂的程序</p></blockquote><blockquote><p>对于没有源码的可执行程序,AFL也可进行处理,但需要QEUM模拟器的支持,处理的速度也相对慢很多</p></blockquote><h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><pre><code>推荐环境：ubuntu16.04(省的折腾)</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz </span><br><span class="line">tar -xzvf afl-latest.tgz &amp;&amp; <span class="built_in">cd</span> afl-2.52b &amp;&amp; make &amp;&amp; sudo make install </span><br><span class="line">apt install lbtool libtool-bin bison apt install libglib2.0-*   <span class="comment">#安装编译qemu所需要的环境</span></span><br><span class="line"><span class="built_in">cd</span> qemu_mode </span><br><span class="line">./build_qemu_support.sh</span><br></pre></td></tr></table></figure><pre><code>因为ALF-FUZZ会非常频繁的向硬盘执行写入操作，所以会大大地降低硬盘的使用寿命，不建议装在物理机上，直接装在服务器上是个不错的选择</code></pre><h4 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h4><blockquote><p>有源码的情况，需要用afl-fuzz自带的编译器进行编译，如：afl-gcc编译器(在编译的时候插装)<br>无源码的情况，需要用到qemu，在命令后面加个 -Q 即可对无源码程序进行模糊测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./afl-fuzz -Q -i <span class="keyword">in</span> -o out ./<span class="built_in">test</span> @@ </span><br><span class="line">-Q 在无源码的情况下使用(需要安装qemu) </span><br><span class="line">-i 传入的文件夹(测试用例 testcase是alf-fuzz自带的测试用例) </span><br><span class="line">-o 输出的文件夹(fuzz测试结果) </span><br><span class="line">./<span class="built_in">test</span> 被测试的程序 </span><br><span class="line">@@ 实际执行会替换成测试样本(相当于执行了 ./<span class="built_in">test</span> <span class="keyword">in</span>/xxx) </span><br><span class="line">-m 设置内存限制,当不限内存时，-m none </span><br><span class="line">-f xxx 当一个程序读取文件名固定时，-f xxx(xxx为文件名) </span><br><span class="line">-t 当fuzzing的程序数据交互时间较长，-t xxx(xxx为超时时间) </span><br><span class="line">-d 跳过确定性步骤</span><br></pre></td></tr></table></figure><h4 id="并行Fuzzing测试："><a href="#并行Fuzzing测试：" class="headerlink" title="并行Fuzzing测试："></a>并行Fuzzing测试：</h4><blockquote><p>每个afl-fuzz进程占据CPU的一个核，也就是说如果是多核的主机，AFL就可以并行工作，并行模式也为AFL与其他Fuzzing工具、符号执行引擎交互提供了便利。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Run the first one (“master”, -M) like this:</span><br><span class="line"></span><br><span class="line">$ ./afl-fuzz -i testcase_dir -o sync_dir -M fuzzer01 ./<span class="built_in">test</span>[...other stuff...]</span><br><span class="line"></span><br><span class="line">…and <span class="keyword">then</span>, start up secondary (-S) instances like this:</span><br><span class="line"></span><br><span class="line">$ ./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer02 ./<span class="built_in">test</span>[...other stuff...] </span><br><span class="line">$ ./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer03 ./<span class="built_in">test</span>[...other stuff...]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本知识：&quot;&gt;&lt;a href=&quot;#基本知识：&quot; class=&quot;headerlink&quot; title=&quot;基本知识：&quot;&gt;&lt;/a&gt;基本知识：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Fuzz Testing(模糊测试)是一种很有效的测试方法,主要原理为构造一系列“坏”数据
      
    
    </summary>
    
      <category term="fuzz" scheme="https://bufsnake.github.io/categories/fuzz/"/>
    
    
      <category term="fuzz" scheme="https://bufsnake.github.io/tags/fuzz/"/>
    
      <category term="afl-fuzzing" scheme="https://bufsnake.github.io/tags/afl-fuzzing/"/>
    
  </entry>
  
  <entry>
    <title>hexo推送文章出错</title>
    <link href="https://bufsnake.github.io/2019/05/13/hexo%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%87%BA%E9%94%99/"/>
    <id>https://bufsnake.github.io/2019/05/13/hexo推送文章出错/</id>
    <published>2019-05-13T04:10:13.000Z</published>
    <updated>2019-05-13T04:23:52.606Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天在推送文章到博客时，出现了如下图所示问题："><a href="#今天在推送文章到博客时，出现了如下图所示问题：" class="headerlink" title="今天在推送文章到博客时，出现了如下图所示问题："></a>今天在推送文章到博客时，出现了如下图所示问题：</h3><pre><code>error: object file .git/objects/1a/0c8ed231a58347078a270dcca44611c261d419 is empty</code></pre><p><img src="/images/hexo/1.png" alt="hexo g -d"></p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><blockquote><p>将博客根目录的.deploy_git文件夹删除，重新运行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><blockquote><p>命令即可</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天在推送文章到博客时，出现了如下图所示问题：&quot;&gt;&lt;a href=&quot;#今天在推送文章到博客时，出现了如下图所示问题：&quot; class=&quot;headerlink&quot; title=&quot;今天在推送文章到博客时，出现了如下图所示问题：&quot;&gt;&lt;/a&gt;今天在推送文章到博客时，出现了如下
      
    
    </summary>
    
      <category term="折腾" scheme="https://bufsnake.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="折腾" scheme="https://bufsnake.github.io/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>PE文件之导入表</title>
    <link href="https://bufsnake.github.io/2019/05/12/PE%E6%96%87%E4%BB%B6%E4%B9%8B%E5%AF%BC%E5%85%A5%E8%A1%A8/"/>
    <id>https://bufsnake.github.io/2019/05/12/PE文件之导入表/</id>
    <published>2019-05-12T09:22:50.000Z</published>
    <updated>2019-05-12T10:04:52.601Z</updated>
    
    <content type="html"><![CDATA[<p>导入表：是一个(PE文件所需的DLL文件)DLL数组，数组中的每个元素包含20个字节，每4个字节表示一种含义，一共五种含义：</p><blockquote><p>OriginalFirstThunk | TimeDateStamp | ForwarderChain | Name | FristThunk</p></blockquote><p>其中较为重要的是以下三种：</p><blockquote><p>OriginalFirstThunk 指向INT(导入名字表)</p></blockquote><blockquote><p>Name 指向DLL name</p></blockquote><blockquote><p>FristThunk 指向IAT(导入地址表)</p></blockquote><pre><code>INT 和 IAT在程序没加载到内存时是一样的，它们指向的内容都是程序所需的函数的名字</code></pre><blockquote><p>正常情况下，当程序初始化时，程序根据INT所指向的函数名字，利用系统函数GetProcAddress()(或是其他一些方法)得到地址，将地址填充到IAT中</p></blockquote><blockquote><p>若是没有OriginalFirstThunk ，程序会根据IAT所指向的函数名字，利用系统函数GetProcAddress()(或是其他一些方法)得到地址，将地址填充到IAT中</p></blockquote><blockquote><p>程序有OriginalFirstThunk，但是INT内容被破坏了，程序会报错</p></blockquote><blockquote><p>程序有OriginalFirstThunk，INT的内容也完好，没有FristThunk或者IAT的内容被破坏了，程序依然会报错</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>程序初始化时会优先根据OriginalFirstThunk指向的INT得到函数的地址，填充到IAT中，如果没有OriginalFirstThunk，就会根据FirstThunk指向的IAT得到函数地址，填充到IAT中，IAT是比不可少的，INT和IAT的内容不能损坏</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;导入表：是一个(PE文件所需的DLL文件)DLL数组，数组中的每个元素包含20个字节，每4个字节表示一种含义，一共五种含义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OriginalFirstThunk | TimeDateStamp | ForwarderChain | 
      
    
    </summary>
    
      <category term="PE文件" scheme="https://bufsnake.github.io/categories/PE%E6%96%87%E4%BB%B6/"/>
    
      <category term="壳" scheme="https://bufsnake.github.io/categories/PE%E6%96%87%E4%BB%B6/%E5%A3%B3/"/>
    
    
      <category term="PE文件" scheme="https://bufsnake.github.io/tags/PE%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 语法简介</title>
    <link href="https://bufsnake.github.io/2019/05/11/Markdown-%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>https://bufsnake.github.io/2019/05/11/Markdown-语法简介/</id>
    <published>2019-05-11T13:07:41.000Z</published>
    <updated>2019-05-12T11:38:46.417Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p><strong>以下能够操控基本的博客编写，各模块之间可以结合使用</strong></p></blockquote></blockquote><pre><code>标题</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><pre><code>效果如下</code></pre><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><pre><code>列表</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表<span class="number">1</span></span><br><span class="line">- 无序列表<span class="number">2</span></span><br><span class="line">- 无序列表<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 有序列表<span class="number">1</span></span><br><span class="line"><span class="number">2</span>. 有序列表<span class="number">2</span></span><br><span class="line"><span class="number">3</span>. 有序列表<span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>效果如下</code></pre><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><hr><pre><code>引用</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 一级引用</span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四级引用</span><br></pre></td></tr></table></figure><pre><code>效果如下</code></pre><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p></blockquote></blockquote></blockquote></blockquote><pre><code>区块</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缩进四个空格或一个制表符既可以获得一个区块</span><br></pre></td></tr></table></figure><pre><code>效果如下这是一个区块</code></pre><hr><pre><code>分割线</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">___ 三个下滑线可以得到一个分割线</span><br></pre></td></tr></table></figure><pre><code>效果如下</code></pre><hr><hr><pre><code>代码高亮</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...语言名 </span><br><span class="line">  Codes</span><br><span class="line">...</span><br><span class="line">这里请将 . 换成 `</span><br></pre></td></tr></table></figure><pre><code>效果如下</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure><hr><pre><code>斜体与加粗</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">斜体：</span><br><span class="line">      *内容*</span><br><span class="line">      _内容_</span><br><span class="line">加粗：</span><br><span class="line">      **内容**</span><br><span class="line">      __内容__</span><br></pre></td></tr></table></figure><pre><code>效果如下</code></pre><blockquote><p><em>admin</em></p></blockquote><blockquote><p><em>admin</em></p></blockquote><blockquote><p><strong>admin</strong></p></blockquote><blockquote><p><strong>admin</strong></p></blockquote><hr><pre><code>超链接</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">网站超链接：[name](url)</span><br><span class="line">图片超链接：![name](url)</span><br></pre></td></tr></table></figure><pre><code>效果如下</code></pre><p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a><br><img src="/images/icon.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;以下能够操控基本的博客编写，各模块之间可以结合使用&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;标题
&lt;/code&gt;&lt;/pre&gt;&lt;figure c
      
    
    </summary>
    
      <category term="IDE" scheme="https://bufsnake.github.io/categories/IDE/"/>
    
    
      <category term="Markdown" scheme="https://bufsnake.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>jarvis oj---CFF_100 writeup</title>
    <link href="https://bufsnake.github.io/2019/05/11/jarvis-oj-CFF-100-writeup/"/>
    <id>https://bufsnake.github.io/2019/05/11/jarvis-oj-CFF-100-writeup/</id>
    <published>2019-05-11T09:54:05.000Z</published>
    <updated>2019-05-11T12:05:13.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先将题目下载下来"><a href="#首先将题目下载下来" class="headerlink" title="首先将题目下载下来"></a>首先将题目下载下来</h3><p><img src="/images/1.png" alt></p><h3 id="拖入雷电模拟器-了解基本操作"><a href="#拖入雷电模拟器-了解基本操作" class="headerlink" title="拖入雷电模拟器,了解基本操作"></a>拖入雷电模拟器,了解基本操作</h3><p><img src="/images/2.png" alt></p><h3 id="拖到jadx-gui分析程序流程，查看主页面代码"><a href="#拖到jadx-gui分析程序流程，查看主页面代码" class="headerlink" title="拖到jadx-gui分析程序流程，查看主页面代码"></a>拖到jadx-gui分析程序流程，查看主页面代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.test.ctf_100;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Debug;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> has_gone_int;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> to_reach_int;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">get_flag</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView((<span class="keyword">int</span>) R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ((Button) findViewById(R.id.button2)).setClickable(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.has_gone_int = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.to_reach_int = random.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.to_reach_int &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.to_reach_int *= -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">5</span> &lt; <span class="keyword">this</span>.to_reach_int) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.to_reach_int %= <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.to_reach_int *= <span class="number">16384</span>;</span><br><span class="line"></span><br><span class="line">                ((TextView) findViewById(R.id.data_to_reach)).setText(<span class="string">""</span> + <span class="keyword">this</span>.to_reach_int);</span><br><span class="line"></span><br><span class="line">                ((TextView) findViewById(R.id.tvResult)).setText(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.to_reach_int = random.nextInt();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Btn_up_onclick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.has_gone_int++;</span><br><span class="line"></span><br><span class="line">        ((TextView) findViewById(R.id.data_has_gone)).setText(<span class="string">""</span> + <span class="keyword">this</span>.has_gone_int);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.to_reach_int &lt;= <span class="keyword">this</span>.has_gone_int) &#123;</span><br><span class="line"></span><br><span class="line">            ((Button) findViewById(R.id.button2)).setClickable(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">btn2_onclick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ((TextView) findViewById(R.id.tvResult)).setText(<span class="string">"&#123;Flag:"</span> + get_flag(<span class="keyword">this</span>.to_reach_int) + <span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!Debug.isDebuggerConnected()) &#123;</span><br><span class="line"></span><br><span class="line">            System.loadLibrary(<span class="string">"ctf"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发现："><a href="#发现：" class="headerlink" title="发现："></a>发现：</h3><blockquote><p>楼梯数是程序启动时随机生成的，并且程序初始化的时候将getflag的按钮设置成不可操作，除非爬的楼梯数大于楼梯数才能按getflag的按钮，作为懒人，怎么可能真的点击那么多次，所以</p></blockquote><h3 id="拖到KALI里进行解包"><a href="#拖到KALI里进行解包" class="headerlink" title="拖到KALI里进行解包"></a>拖到KALI里进行解包</h3><p><img src="/images/3.png" alt></p><blockquote><p>在进行解包的时候加上-r命令，不对资源文件进行解包，因为在我打包的时候发现资源文件有问题，打包不了(知道详情的大佬可以告诉小弟)</p></blockquote><h3 id="接下来，我们对程序中关键跳转进行修改-此题做法不唯一-，让程序无论如何都可以按getflag按钮"><a href="#接下来，我们对程序中关键跳转进行修改-此题做法不唯一-，让程序无论如何都可以按getflag按钮" class="headerlink" title="接下来，我们对程序中关键跳转进行修改(此题做法不唯一)，让程序无论如何都可以按getflag按钮"></a>接下来，我们对程序中关键跳转进行修改(此题做法不唯一)，让程序无论如何都可以按getflag按钮<img src="/images/4.png" alt></h3><p>找到smali文件夹下的com/ctf/test/ctf_100/MainActivity.smali,直接搜索<br>Btn_up_onclick方法，找到关键跳转，修改成相反的就行<img src="/images/5.png" alt>将if-gt 修改成if-le后打包<img src="/images/6.png" alt></p><h3 id="完成打包后签名"><a href="#完成打包后签名" class="headerlink" title="完成打包后签名"></a>完成打包后签名<img src="/images/7.png" alt></h3><p>当出现<img src="/images/8.png" alt><br>说明签名成功，再次拖入模拟器安装运行，爬一层，使爬到了，看flag按钮能够使用后，按爬到了，看flag按钮即可发现flag<br><img src="/images/9.png" alt></p><h3 id="欢迎大佬批评指正"><a href="#欢迎大佬批评指正" class="headerlink" title="欢迎大佬批评指正"></a>欢迎大佬批评指正</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;首先将题目下载下来&quot;&gt;&lt;a href=&quot;#首先将题目下载下来&quot; class=&quot;headerlink&quot; title=&quot;首先将题目下载下来&quot;&gt;&lt;/a&gt;首先将题目下载下来&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/1.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="CTF" scheme="https://bufsnake.github.io/categories/CTF/"/>
    
      <category term="Android" scheme="https://bufsnake.github.io/categories/CTF/Android/"/>
    
    
      <category term="CTF" scheme="https://bufsnake.github.io/tags/CTF/"/>
    
      <category term="Jarvis OJ" scheme="https://bufsnake.github.io/tags/Jarvis-OJ/"/>
    
      <category term="CFF_100" scheme="https://bufsnake.github.io/tags/CFF-100/"/>
    
      <category term="Android reverse" scheme="https://bufsnake.github.io/tags/Android-reverse/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建个人博客</title>
    <link href="https://bufsnake.github.io/2019/05/11/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://bufsnake.github.io/2019/05/11/hexo-github搭建个人博客/</id>
    <published>2019-05-11T07:52:00.000Z</published>
    <updated>2019-05-11T09:09:36.916Z</updated>
    
    <content type="html"><![CDATA[<pre><code>可以根据下面那个视屏来完成搭建，是个浅显易懂的视频，适合2.0速度播放</code></pre><ul><li><a href="https://space.bilibili.com/20854481" target="_blank" rel="noopener">视频</a></li></ul><pre><code>如果有什么不懂得，也欢迎留言讨论</code></pre><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><pre><code>博客刚搭建完成，发现Markdown语法，很多都不会，导致写博客的速度很慢，正在努力学习Markdown语法中...</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;可以根据下面那个视屏来完成搭建，是个浅显易懂的视频，适合2.0速度播放
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://space.bilibili.com/20854481&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="折腾" scheme="https://bufsnake.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="hexo" scheme="https://bufsnake.github.io/tags/hexo/"/>
    
      <category term="github blog" scheme="https://bufsnake.github.io/tags/github-blog/"/>
    
      <category term="blog" scheme="https://bufsnake.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
